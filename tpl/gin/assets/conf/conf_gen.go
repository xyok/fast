// Package conf Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../../sample/app.ini
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleAppIni = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x5d\x6e\xad\x30\x0c\x84\xdf\xbd\x0a\x94\x05\x70\x03\xe7\x4f\xf7\xe1\xac\x04\x21\x64\x88\x1b\xa2\x26\x38\x8a\x03\x54\x5d\x7d\x15\x10\x95\xfa\xf8\x8d\xed\x99\x91\x3b\xa1\xb4\x51\xea\x21\xb0\xa1\xea\x5d\x29\x43\xe3\x6a\x15\x44\x4e\xb9\xe0\x7f\xad\xb5\x82\x44\x68\x86\xec\x02\xf1\x5a\xd4\xa7\x86\x3d\xb9\x4c\x7f\xa5\x05\xc3\xe1\x80\xd1\xc9\x96\x14\x40\x37\x71\x08\xbc\xf4\x20\x3b\x5a\x4b\x69\x98\x59\x0e\xd3\xa6\x7d\xd5\xba\xd6\x75\x53\x96\x0c\x66\x1c\x51\xa8\x87\x55\x28\x95\x71\x62\xce\x0a\x22\x8a\xec\x9c\xcc\x79\x70\xbb\x3f\x9e\x0a\xcc\x78\x85\x64\x36\xac\xe0\x32\xf4\x3c\xa1\x2f\xf0\x5b\xfc\x71\xbf\xb5\x10\xf0\x6b\x70\xc6\xd3\x30\xf1\xb2\x54\xef\xaa\xd1\x87\xc4\x91\x96\x4b\x6a\x35\x78\xb6\x83\xa7\x8d\x7c\x41\xc8\x73\x22\x99\xd9\x9b\x63\x5f\x6b\x80\xce\x73\x69\xdf\x97\x5b\x71\xdf\x74\x0e\x0a\xa1\x2d\xf0\x82\x11\xa7\xcf\x35\x9e\x01\x97\xd3\xf5\xc8\x0f\xe7\x29\x62\x9e\xcf\x9a\x56\xfe\x61\x8c\xb5\x67\xab\xe0\x27\x00\x00\xff\xff\xdb\x72\x8b\x78\x7b\x01\x00\x00"

func sampleAppIniBytes() ([]byte, error) {
	return bindataRead(
		_sampleAppIni,
		"sample/app.ini",
	)
}

func sampleAppIni() (*asset, error) {
	bytes, err := sampleAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample/app.ini", size: 379, mode: os.FileMode(420), modTime: time.Unix(1654392276, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample/app.ini": sampleAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{sampleAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
